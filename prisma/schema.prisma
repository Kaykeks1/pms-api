// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  email String @unique
  hash String
  firstName String?
  lastName String?
  // userOrganization UserOrganization?
  organizations Organization[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id     Int  @id @default(autoincrement())
  // userOrganization UserOrganization?
  users User[]
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model UserOrganization {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
//   organization   Organization @relation(fields: [organizationId], references: [id])
//   organizationId Int  @unique // relation scalar field (used in the `@relation` attribute above)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

enum Role {
  developer
  designer
  manager
}

model TeamMember {
  id     Int  @id @default(autoincrement())
  name String
  role Role
  // task TaskTeamMember[]
  tasks Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  nice
  low
  medium
  high
  critical
}

enum Effort {
  small
  medium
  large
}

enum Status {
  not_started
  started
  delayed
  completed
  on_hold
}

model Project {
  id     Int  @id @default(autoincrement())
  title String
  description String? @db.Text
  priority Priority?
  effort Effort?
  status Status?
  task Task[]
  deadline DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id     Int  @id @default(autoincrement())
  description String @db.Text
  due_date DateTime?
  is_completed Boolean @default(false)
  // teamMembers TaskTeamMember[]
  teamMembers TeamMember[]
  project Project @relation(fields: [projectId], references: [id])
  projectId Int  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model TaskTeamMember {
//   id     Int  @id @default(autoincrement())
//   task   Task @relation(fields: [taskId], references: [id])
//   taskId Int  @unique
//   teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
//   teamMemberId Int  @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
